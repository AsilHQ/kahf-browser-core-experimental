diff a/components/brave_new_tab_ui/components/search/SearchResult.tsx b/components/brave_new_tab_ui/components/search/SearchResult.tsx	(rejected hunks)
@@ -3,14 +3,14 @@
 // License, v. 2.0. If a copy of the MPL was not distributed with this file,
 // You can obtain one at https://mozilla.org/MPL/2.0/.
 import Flex from '$web-common/Flex';
-import { getLocale } from '$web-common/locale';
-import Icon from '@brave/leo/react/icon';
-import { color, font, gradient, icon, radius, spacing } from '@brave/leo/tokens/css/variables';
+// import { getLocale } from '$web-common/locale';
+// import Icon from '@brave/leo/react/icon';
+import { color, font, radius, spacing } from '@brave/leo/tokens/css/variables';
 import { mojoString16ToString } from 'chrome://resources/js/mojo_type_util.js';
 import { AutocompleteMatch } from 'gen/ui/webui/resources/cr_components/searchbox/searchbox.mojom.m';
 import * as React from 'react';
 import styled from 'styled-components';
-import { useUnpaddedImageUrl } from '../../../brave_news/browser/resources/shared/useUnpaddedImageUrl';
+// import { useUnpaddedImageUrl } from '../../../brave_news/browser/resources/shared/useUnpaddedImageUrl';
 
 interface Props {
   match: AutocompleteMatch
@@ -36,40 +36,40 @@ const Container = styled.a`
   }
 `
 
-const IconContainer = styled.div`
-  border-radius: ${radius.m};
-  width: 32px;
-  height: 32px;
+// const IconContainer = styled.div`
+//   border-radius: ${radius.m};
+//   width: 32px;
+//   height: 32px;
 
-  display: flex;
-  align-items: center;
-  justify-content: center;
+//   display: flex;
+//   align-items: center;
+//   justify-content: center;
 
-  flex-shrink: 0;
+//   flex-shrink: 0;
 
-  > * { border-radius: ${radius.s}; }
+//   > * { border-radius: ${radius.s}; }
 
-  > span {
-    width: 20px;
-    height: 20px;
-  }
+//   > span {
+//     width: 20px;
+//     height: 20px;
+//   }
 
-  > img {
-    width: 100%;
-    height: 100%;
-  }
-`
+//   > img {
+//     width: 100%;
+//     height: 100%;
+//   }
+// `
 
-const SearchIcon = styled.span<{ url: string }>`
-  background: rgba(255, 255, 255, 0.5);
-  mask-image: url(${p => p.url});
-  mask-size: contain;
-`
+// const SearchIcon = styled.span<{ url: string }>`
+//   background: rgba(255, 255, 255, 0.5);
+//   mask-image: url(${p => p.url});
+//   mask-size: contain;
+// `
 
-const FavIcon = styled.span<{ url: string }>`
-  background-image: url(${p => p.url});
-  background-size: contain;
-`
+// const FavIcon = styled.span<{ url: string }>`
+//   background-image: url(${p => p.url});
+//   background-size: contain;
+// `
 
 const Content = styled.span`
   font: ${font.large.regular};
@@ -83,68 +83,67 @@ const Description = styled.span`
   color: rgba(255,255,255,0.7);
 `
 
-const LeoIcon = styled(Icon)`
-  --leo-icon-size: ${icon.l};
-
-  color: ${color.white};
-  background: ${gradient.iconsActive};
-  border-radius: ${radius.m};
-  padding: ${spacing.s};
-`
-
-const Divider = styled.hr`
-  margin: 2px -8px;
-  opacity: 0.1;
-`
-
-const hide = { opacity: 0 }
-const show = { opacity: 1 }
-function RichImage({ url }: { url: string }) {
-  const [loaded, setLoaded] = React.useState(false)
-  const iconUrl = useUnpaddedImageUrl(url, () => setLoaded(true))
-  return <img src={iconUrl} style={loaded ? show : hide} />
-}
-function Image({ match, isAskLeo }: { match: AutocompleteMatch, isAskLeo: boolean }) {
-  // AskLeo is a case we treat specially. It's included on most queries.
-  if (isAskLeo) return <LeoIcon name='product-brave-leo' />
-
-  // We have three separate cases here:
-  // 1. A chromium generic search result icon:
-  //    We display the icon as a mask-image, so we can change the color
-  // 2. An `imageUrl` with the chrome:// scheme, which we can load on the NTP:
-  //    We display the image as a background, as its safe on the NTP
-  // 3. A web resource, which we need to load from the WebUI via the unpadded
-  //    url machinery.
-  const isGeneric = !match.imageUrl
-  return isGeneric
-    ? <SearchIcon url={match.iconUrl} />
-    : match.imageUrl.startsWith('chrome')
-      ? <FavIcon url={match.imageUrl} />
-      : <RichImage url={match.imageUrl} />
-}
+// const LeoIcon = styled(Icon)`
+//   --leo-icon-size: ${icon.l};
+
+//   color: ${color.white};
+//   background: ${gradient.iconsActive};
+//   border-radius: ${radius.m};
+//   padding: ${spacing.s};
+// `
+
+// const Divider = styled.hr`
+//   margin: 2px -8px;
+//   opacity: 0.1;
+// `
+
+// const hide = { opacity: 0 }
+// const show = { opacity: 1 }
+// function RichImage({ url }: { url: string }) {
+//   const [loaded, setLoaded] = React.useState(false)
+//   const iconUrl = useUnpaddedImageUrl(url, () => setLoaded(true))
+//   return <img src={iconUrl} style={loaded ? show : hide} />
+// }
+// function Image({ match, isAskLeo }: { match: AutocompleteMatch, isAskLeo: boolean }) {
+//   // AskLeo is a case we treat specially. It's included on most queries.
+//   if (isAskLeo) return <LeoIcon name='product-brave-leo' />
+
+//   // We have three separate cases here:
+//   // 1. A chromium generic search result icon:
+//   //    We display the icon as a mask-image, so we can change the color
+//   // 2. An `imageUrl` with the chrome:// scheme, which we can load on the NTP:
+//   //    We display the image as a background, as its safe on the NTP
+//   // 3. A web resource, which we need to load from the WebUI via the unpadded
+//   //    url machinery.
+//   const isGeneric = !match.imageUrl
+//   return isGeneric
+//     ? <SearchIcon url={match.iconUrl} />
+//     : match.imageUrl.startsWith('chrome')
+//       ? <FavIcon url={match.imageUrl} />
+//       : <RichImage url={match.imageUrl} />
+// }
 
 export default function SearchResult({ match, selected, onClick }: Props) {
   const contents = mojoString16ToString(match.swapContentsAndDescription ? match.description : match.contents)
   const description = mojoString16ToString(match.swapContentsAndDescription ? match.contents : match.description)
-  const isAskLeo = description === getLocale('searchAskLeo')
+  // const isAskLeo = description === getLocale('searchAskLeo')
 
-  const result = <Container href={match.destinationUrl.url} aria-selected={selected} onClick={e => {
+  // Return null for AskLeo results to hide them
+  // if (isAskLeo) {
+  //   return null
+  // }
+
+  // Simplified to just return the result without AskLeo-specific wrapper
+  return <Container href={match.destinationUrl.url} aria-selected={selected} onClick={e => {
     e.preventDefault()
     onClick(e)
   }}>
-    <IconContainer>
+    {/* <IconContainer>
       <Image key={match.imageUrl ?? match.iconUrl} match={match} isAskLeo={isAskLeo} />
-    </IconContainer>
+    </IconContainer> */}
     <Flex direction='column'>
       <Content>{contents}</Content>
       {description && <Description>{description}</Description>}
     </Flex>
   </Container>
-
-  return isAskLeo
-    ? <>
-      <Divider />
-      {result}
-    </>
-    : result
 }
