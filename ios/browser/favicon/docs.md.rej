diff a/ios/browser/favicon/docs.md b/ios/browser/favicon/docs.md	(rejected hunks)
@@ -1,17 +1,17 @@
 # Favicon Documentation
 
-This file documents the list of changes made to the Chromium iOS Favicon implementation as it isn't compatible with Brave-iOS.
+This file documents the list of changes made to the Chromium iOS Favicon implementation as it isn't compatible with Kahf-iOS.
 
 
 # Changes
 
-[BraveIOSWebFaviconDriver.h](https://github.com/brave/brave-core/blob/master/ios/browser/favicon/brave_ios_web_favicon_driver.h): Modification of `WebFaviconDriver` to get rid of `web::WebState` and instead use `ChromeBrowserState` as iOS cannot use `web::WebState` since we do not use `CRWWebView` in our Swift code. This means we got rid of all the `WebStateObserver` and `UserData` as well, and instead store the class with the `ChromeBrowserState`. This is done via the `CreateForBrowserState` and `FromBrowserState` functions.
+[KahfIOSWebFaviconDriver.h](https://github.com/brave/brave-core/blob/master/ios/browser/favicon/brave_ios_web_favicon_driver.h): Modification of `WebFaviconDriver` to get rid of `web::WebState` and instead use `ChromeBrowserState` as iOS cannot use `web::WebState` since we do not use `CRWWebView` in our Swift code. This means we got rid of all the `WebStateObserver` and `UserData` as well, and instead store the class with the `ChromeBrowserState`. This is done via the `CreateForBrowserState` and `FromBrowserState` functions.
 
-[BraveIOSWebFaviconDriver.mm](https://github.com/brave/brave-core/blob/master/ios/browser/favicon/brave_ios_web_favicon_driver.mm)
+[KahfIOSWebFaviconDriver.mm](https://github.com/brave/brave-core/blob/master/ios/browser/favicon/brave_ios_web_favicon_driver.mm)
 
 The below code was added in order to setup a navigation stack for the Swift iOS WebView when navigation has just begun.
 ```c++
-void BraveIOSWebFaviconDriver::DidStartNavigation(
+void KahfIOSWebFaviconDriver::DidStartNavigation(
                                     ChromeBrowserState* browser_state, 
                                          const GURL& page_url) {
     items.clear();
@@ -24,7 +24,7 @@ void BraveIOSWebFaviconDriver::DidStartNavigation(
 
 When navigation is complete, we call the below function to begin fetching the `Favicon` for the `URL` that was navigated to:
 ```c++
-void BraveIOSWebFaviconDriver::DidFinishNavigation(
+void KahfIOSWebFaviconDriver::DidFinishNavigation(
                                     ChromeBrowserState* browser_state, 
                                          const GURL& page_url) {
     web::NavigationItemImpl* item = !items.empty() ? items.back().get() : nullptr;
