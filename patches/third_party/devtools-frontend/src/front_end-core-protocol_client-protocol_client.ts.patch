diff --git a/front_end/core/protocol_client/protocol_client.ts b/front_end/core/protocol_client/protocol_client.ts
index 6cc8a12337304550a27f467ca2ffc67fe7eeb057..47b0900e4284158f2995de8856776bcbf2a8bdc3 100644
--- a/front_end/core/protocol_client/protocol_client.ts
+++ b/front_end/core/protocol_client/protocol_client.ts
@@ -2,14 +2,11 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-import * as InspectorBackendCommands from '../../generated/InspectorBackendCommands.js';
-import * as InspectorBackend from './InspectorBackend.js';
-import * as NodeURL from './NodeURL.js';
+import * as InspectorBackendCommands from "../../generated/InspectorBackendCommands.js";
+import * as InspectorBackend from "./InspectorBackend.js";
+import * as NodeURL from "./NodeURL.js";
 
-export {
-  InspectorBackend,
-  NodeURL,
-};
+export { InspectorBackend, NodeURL };
 
 // Create the global here because registering commands will involve putting
 // items onto the global.
@@ -18,3 +15,28 @@ self.Protocol = self.Protocol || {};
 
 // FIXME: This instance of InspectorBackend should not be a side effect of importing this module.
 InspectorBackendCommands.registerCommands(InspectorBackend.inspectorBackend);
+InspectorBackend.inspectorBackend.registerEvent(
+  "Network.requestAdblockInfoReceived" as InspectorBackend.QualifiedName,
+  ["requestId", "info"]
+);
+
+InspectorBackend.inspectorBackend.registerEvent("Brave.braveEventReceived" as InspectorBackend.QualifiedName, ['event', 'params'])
+
+InspectorBackend.inspectorBackend.registerCommand(
+  "Brave.enable" as InspectorBackend.QualifiedName,
+  [],
+  [],
+  ""
+);
+InspectorBackend.inspectorBackend.registerCommand(
+  "Brave.disable" as InspectorBackend.QualifiedName,
+  [],
+  [],
+  ""
+);
+InspectorBackend.inspectorBackend.registerCommand(
+  "Brave.sendBraveMessage" as InspectorBackend.QualifiedName,
+  [{ name: "message", type: "object", optional: false, description: "" }],
+  [],
+  ""
+);
